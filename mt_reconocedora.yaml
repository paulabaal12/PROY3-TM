# MT Reconocedora: Verifica si una cadena tiene el mismo número de a's que b's
q_states:
  q_list:
    - 'q0'      # Estado inicial para marcar todo
    - 'q1'      # Marcar siguiente símbolo
    - 'q2'      # Buscar X
    - 'q3'      # Buscar Y para emparejar
    - 'q4'      # Verificar si quedan símbolos sin marcar
    - 'q5'      # Volver al inicio para seguir buscando
    - 'q6'      # Estado de aceptación
    - 'q7'      # Estado de rechazo
  initial: 'q0'
  final: 'q6'

alphabet:
  - a
  - b

tape_alphabet:
  - X
  - Y
  - Z  # Marcar pares ya contados
  - a
  - b
  - _

delta:
  # Estado q0 - Inicio
  - params:
      initial_state: 'q0'
      tape_input: 'a'
    output:
      final_state: 'q1'
      tape_output: 'X'
      tape_displacement: R

  - params:
      initial_state: 'q0'
      tape_input: 'b'
    output:
      final_state: 'q1'
      tape_output: 'Y'
      tape_displacement: R

  - params:
      initial_state: 'q0'
      tape_input: '_'
    output:
      final_state: 'q2'
      tape_output: '_'
      tape_displacement: L

  # Estado q1 - Marcar siguiente símbolo
  - params:
      initial_state: 'q1'
      tape_input: 'a'
    output:
      final_state: 'q1'
      tape_output: 'X'
      tape_displacement: R

  - params:
      initial_state: 'q1'
      tape_input: 'b'
    output:
      final_state: 'q1'
      tape_output: 'Y'
      tape_displacement: R

  - params:
      initial_state: 'q1'
      tape_input: '_'
    output:
      final_state: 'q2'
      tape_output: '_'
      tape_displacement: L

  # Estado q2 - Buscar X
  - params:
      initial_state: 'q2'
      tape_input: 'X'
    output:
      final_state: 'q3'
      tape_output: 'Z'
      tape_displacement: R

  - params:
      initial_state: 'q2'
      tape_input: 'Y'
    output:
      final_state: 'q2'
      tape_output: 'Y'
      tape_displacement: L

  - params:
      initial_state: 'q2'
      tape_input: 'Z'
    output:
      final_state: 'q2'
      tape_output: 'Z'
      tape_displacement: L

  - params:
      initial_state: 'q2'
      tape_input: '_'
    output:
      final_state: 'q4'
      tape_output: '_'
      tape_displacement: R

  # Estado q3 - Buscar Y para emparejar
  - params:
      initial_state: 'q3'
      tape_input: 'Y'
    output:
      final_state: 'q2'
      tape_output: 'Z'
      tape_displacement: L

  - params:
      initial_state: 'q3'
      tape_input: 'X'
    output:
      final_state: 'q3'
      tape_output: 'X'
      tape_displacement: R

  - params:
      initial_state: 'q3'
      tape_input: 'Z'
    output:
      final_state: 'q3'
      tape_output: 'Z'
      tape_displacement: R

  - params:
      initial_state: 'q3'
      tape_input: '_'
    output:
      final_state: 'q5'
      tape_output: '_'
      tape_displacement: L

  # Estado q4 - Verificar si quedan símbolos sin marcar
  - params:
      initial_state: 'q4'
      tape_input: 'X'
    output:
      final_state: 'q7'
      tape_output: 'X'
      tape_displacement: R

  - params:
      initial_state: 'q4'
      tape_input: 'Y'
    output:
      final_state: 'q7'
      tape_output: 'Y'
      tape_displacement: R

  - params:
      initial_state: 'q4'
      tape_input: 'Z'
    output:
      final_state: 'q4'
      tape_output: 'Z'
      tape_displacement: R

  - params:
      initial_state: 'q4'
      tape_input: '_'
    output:
      final_state: 'q6'
      tape_output: '_'
      tape_displacement: R

  # Estado q5 - Volver al inicio para seguir buscando
  - params:
      initial_state: 'q5'
      tape_input: 'X'
    output:
      final_state: 'q5'
      tape_output: 'X'
      tape_displacement: L

  - params:
      initial_state: 'q5'
      tape_input: 'Y'
    output:
      final_state: 'q5'
      tape_output: 'Y'
      tape_displacement: L

  - params:
      initial_state: 'q5'
      tape_input: 'Z'
    output:
      final_state: 'q5'
      tape_output: 'Z'
      tape_displacement: L

  - params:
      initial_state: 'q5'
      tape_input: '_'
    output:
      final_state: 'q3'
      tape_output: '_'
      tape_displacement: R

simulation_strings:
  - 'abbba'    # Debe rechazar
  - 'abbaab'   # Debe aceptar
  - 'ababab'    # Debe aceptar
  - 'aabbb'   # Debe rechazar
  